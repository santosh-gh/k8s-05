trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  serviceConnection: 'arm-svc-con'
  aksCluster: 'aks-onlinestore-dev-uksouth-001'
  aksResourceGroup: 'rg-onlinestore-dev-uksouth-001'
  acrServiceConnection: 'acr-svc-connection'
  aksServiceConnection: 'aks-svc-connection'
  acrName: 'acronlinestoredevuksouth001'
  namespace: 'default'
  environment: "dev"
  artifactName: 'storehelmchart'

stages:
  - stage: Publish
    displayName: Publish Artifact
    jobs:
      - job: PublishArtifact
        displayName: Publish Artifact
        steps:
          - task: PublishPipelineArtifact@1
            displayName: Publish Manifest
            inputs:
              artifactName: $(artifactName)
              path: $(artifactName)

  - stage: Deploy
    jobs:
    - deployment: DeployAKS
      displayName: Deploy AKS
      environment: $(environment)
      strategy:
        runOnce:
          deploy:
            steps:
              - download: current
                artifact: $(artifactName)

              - script: |
                  echo "Workspace Directory: $(Pipeline.Workspace)"
                  ls -R "$(Pipeline.Workspace)"

              - task: AzureCLI@2
                displayName: Get AKS Credentials
                inputs:
                  azureSubscription: $(serviceConnection)
                  scriptType: bash
                  scriptLocation: inlineScript
                  inlineScript: |
                    echo "Getting AKS credentials..."
                    az aks get-credentials --name $(aksCluster) --resource-group $(aksResourceGroup) --overwrite-existing

              - task: HelmDeploy@1
                displayName: Helm Upgrade/Install
                inputs:
                  connectionType: 'Azure Resource Manager'
                  azureSubscription: $(serviceConnection)
                  azureResourceGroup: $(aksResourceGroup)
                  kubernetesCluster: $(aksCluster)
                  namespace: $(namespace)
                  command: upgrade
                  chartType: FilePath
                  chartPath: '$(Pipeline.Workspace)/storehelmchart/store-front'
                  releaseName: 'test'
                  install: true
                  waitForExecution: false                  